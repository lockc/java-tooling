<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- 
		The base connection to the database using DriverManagerDataSource.  This does not use 
		pooled connections it creates a new connection to the database every time it is used.
	 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.sqlite.JDBC"/>
		<property name="url" value="jdbc:sqlite:/home/lockc/git/spring-examples/demo.db"/>
	</bean>

	<!-- 
		Example where we do NOT extend JdbcDaoSupport so we have to create our 
		own JdbcTemplate and wire it into our DAO class directly.
	 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource"/>
	</bean>
	
	<bean id="demoDao" class="lockc.spring.examples.jdbc.DemoDao">
		<constructor-arg ref="jdbcTemplate"/>
	</bean>
	
	
	<!-- 
		A short hand version of the above example where we DO extend JdbcDaoSupport 
		and wire the dataSource directly skipping out the JdbcTempate bean altogether 
		and use the getJdbcTemplate() method to get the JdbcTemplate
	 -->
 	<bean id="demoSupportDao" class="lockc.spring.examples.jdbc.DemoSupportDao">
		<property name="dataSource" ref="dataSource"/>
	</bean>
</beans>
